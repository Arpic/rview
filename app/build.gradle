/*
 * Copyright (C) 2016 Jorge Ruesga
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.model.application'
apply plugin: 'org.bitbucket.pvoid.android-apt'

def libraries = rootProject.ext.libraries;

dependencies {
    compile project(':gerrit')
    compile project(':wizard')
    compile "com.android.support:support-v4:${libraries.support}"
    compile "com.android.support:appcompat-v7:${libraries.support}"
    compile "com.android.support:design:${libraries.support}"
    compile "com.android.support:customtabs:${libraries.support}"
    compile "com.jakewharton:butterknife:${libraries.butterknife}"
    apt     "com.jakewharton:butterknife-compiler:${libraries.butterknife}"
    compile "io.reactivex:rxjava:${libraries.rxjava}"
    compile "io.reactivex:rxandroid:${libraries.rxandroid}"
}

model {
    android {
        defaultConfig {
            versionCode 1
            versionName '0.0.1'
            vectorDrawables.useSupportLibrary = true

            applicationId = 'com.ruesga.rview'
        }

        buildTypes {
            debug {
                debuggable true
            }
            release {
                debuggable false

                zipAlignEnabled true
                shrinkResources false
                minifyEnabled true
                useProguard true

                proguardFiles.addAll([file('proguard-project.txt')])

                if (rootProject.file('release.properties').exists()) {
                    signingConfig = $('android.signingConfigs.release-signing-config')
                }
            }
        }
    }

    android.dataBinding {
        //noinspection GroovyAssignabilityCheck
        enabled true
    }

    android.signingConfigs {
        create('release-signing-config') {
            def Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(rootProject.file('release.properties')))

            def Properties ksProps = new Properties()
            ksProps.load(new FileInputStream(new File((String) releaseProps['signing.config'])))
            storeFile file(ksProps['keystore'])
            keyAlias ksProps['alias']
            storePassword ksProps['storePass']
            keyPassword ksProps['pass']
            storeType ksProps['storeType']
        }
    }
}