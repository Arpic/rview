/*
 * Copyright (C) 2016 Jorge Ruesga
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

import groovy.json.JsonSlurper

def libraries = rootProject.ext.libraries;

dependencies {
    compile project(':gerrit')
    compile project(':wizard')
    compile project(':drawer')
    compile("com.crashlytics.sdk.android:crashlytics:${libraries.crashlytics}@aar") { transitive = true; }
    compile("com.crashlytics.sdk.android:crashlytics-core:${libraries.crashlytics_core}@aar") { transitive = true; }
    compile("com.crashlytics.sdk.android:answers:${libraries.crashlytics_answers}@aar") { transitive = true; }
    compile "com.google.firebase:firebase-messaging:${libraries.firebase}"
    compile "com.android.support:support-v4:${libraries.support}"
    compile "com.android.support:appcompat-v7:${libraries.support}"
    compile "com.android.support:cardview-v7:${libraries.support}"
    compile "com.android.support:preference-v14:${libraries.support}"
    compile "com.android.support:design:${libraries.support}"
    compile "com.android.support:customtabs:${libraries.support}"
    compile "com.google.code.gson:gson:${libraries.gson}"
    compile "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"
    compile "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    compile "com.github.jruesga:rxloader:${libraries.rxloader2}"
    compile "commons-io:commons-io:${libraries.commons_io}"
    compile "com.github.castorflex.smoothprogressbar:library:${libraries.smoothprogressbar}"
    compile "com.squareup.picasso:picasso:${libraries.picasso2}"
    compile "com.jakewharton.picasso:picasso2-okhttp3-downloader:${libraries.picasso2_okhttp3_downloader}"
    compile "org.ocpsoft.prettytime:prettytime:${libraries.prettytime}"
    compile "com.google.android:flexbox:${libraries.flexboxlayout}"
    compile "com.github.jruesga:floatingsearchview:${libraries.floatingsearchview}"
    compile "com.github.BigBadaboom:androidsvg:${libraries.androidsvg}"
    compile ("com.mikepenz:aboutlibraries:${libraries.aboutlibraries}@aar") { transitive = true }
}

android {
    defaultConfig {
        versionCode 22
        versionName '1.5.4'
        vectorDrawables.useSupportLibrary = true

        applicationId 'com.ruesga.rview'

        resValue "string", "fcm_app_id", "1:577867348267:android:01dee9b4cab97d4a"
        resValue "string", "fcm_api_key", "<empty>"

        return void;
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            if (rootProject.file('release.properties').exists()) {
                def Properties releaseProps = new Properties()
                releaseProps.load(new FileInputStream(rootProject.file('release.properties')))

                def Properties ksProps = new Properties()
                ksProps.load(new FileInputStream(new File((String) releaseProps['signing.config'])))
                storeFile file(ksProps['keystore'])
                keyAlias ksProps['alias']
                storePassword ksProps['storePass']
                keyPassword ksProps['pass']
                storeType ksProps['storeType']
            }

            return void;
        }
    }

    dexOptions {
        jumboMode = true
    }

    buildTypes {
        debug {
            debuggable true
            ext.enableCrashlytics = false

            return void;
        }
        release {
            debuggable false

            zipAlignEnabled true
            shrinkResources false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')

            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release

            // IMP! Enable your Crashlytics api key in a file called fabric.properties
            // and add the value apiKey=<your key> to that file
            ext.enableCrashlytics = project.file('fabric.properties').exists()

            return void;
        }
    }

    return void;
}

def addActivityAliases(manifest) {
    if (!manifest.exists()) {
        return;
    }

    def repositories = new File(
            (project.path + "/src/main/res/raw/repositories.json")
                    .replace(":", ""))

   def json = new JsonSlurper().parseText(repositories.text)
    def activityAlias = "\n\n<!-- Repositories url handling activity-aliases -->\n"
    json.each {
        def url = new URL(it.url.toString())
        def host = url.authority;
        def path = url.path;
        def name = it.name.toString().replaceAll(" ", "");

        activityAlias +=
            "<activity-alias android:name=\".${name}ExternalUrlHandlerActivity\"\n" +
            "    android:theme=\"@style/AppTheme.NoStatusBarColor\"\n" +
            "    android:targetActivity=\".UrlHandlerProxyActivity\"\n" +
            "    android:excludeFromRecents=\"true\"\n" +
            "    android:taskAffinity=\"\"\n" +
            "    android:enabled=\"false\">\n" +
            "    <intent-filter>\n" +
            "        <action android:name=\"android.intent.action.VIEW\" />\n" +
            "        <category android:name=\"android.intent.category.DEFAULT\" />\n" +
            "        <category android:name=\"android.intent.category.BROWSABLE\" />\n" +
            "        <data android:scheme=\"http\" android:host=\"${host}\" android:pathPrefix=\"${path}\" />\n" +
            "        <data android:scheme=\"https\" android:host=\"${host}\" android:pathPrefix=\"${path}\" />\n" +
            "    </intent-filter>\n" +
            "</activity-alias>\n\n"
    }

    def text = manifest.text.replace("<!-- URL-ACTIVITY-HANDLERS -->", activityAlias.toString())
    manifest.delete()
    manifest.createNewFile()
    manifest.text += text
}

def registerAddActivityAliases(task, build) {
    def buildName = build.name.toString()
    def manifestFull = new File(
            (project.path + "/build/intermediates/manifests/full/${buildName}/AndroidManifest.xml")
            .replace(":", ""))
    def manifestInstantRun = new File(
            (project.path + "/build/intermediates/manifests/instant-run/${buildName}/AndroidManifest.xml")
                    .replace(":", ""))

    def addActivityAliasesTaskName = "addActivityAliases${buildName.capitalize()}"
    project.task(addActivityAliasesTaskName).doLast({
        description = 'Include extra activity-alias to final AndroidManifest.xml'
        addActivityAliases(manifestFull)
        addActivityAliases(manifestInstantRun)
    })

    task.dependsOn(addActivityAliasesTaskName)
    def processTask = "process${buildName.capitalize()}Manifest"
    project.(addActivityAliasesTaskName.toString()).dependsOn(processTask)
}

tasks.whenTaskAdded { task ->
    project.("android").buildTypes.all { build ->
        def buildName = build.name.capitalize().toString()
        def compileTask = "process${buildName}Resources".toString()
        if (compileTask == task.name) {
            registerAddActivityAliases(task, build)
        }
    }
}

apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'
